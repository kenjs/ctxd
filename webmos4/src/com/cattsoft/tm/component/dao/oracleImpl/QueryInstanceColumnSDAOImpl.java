package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IQueryInstanceColumnSDAO;import com.cattsoft.tm.vo.QueryInstanceColumnSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法QueryInstanceColumnSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class QueryInstanceColumnSDAOImpl implements IQueryInstanceColumnSDAO{    private static Logger log = Logger.getLogger(QueryInstanceColumnSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;    if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO QUERY_INSTANCE_COLUMN(COLUMN_NAME,CREATE_TIME,IS_GROUP,IS_SUM,QUERY_INSTANCE_COLUMN_ID,SEQ,STS,INSTANCE_ID,BG_COLOR,COLUMN_WIDTH,IS_DATA_PRIV)");sql.append(" VALUES (:columnName,:createTime,:isGroup,:isSum,:queryInstanceColumnId,:seq,:sts,:instanceId,:bgColor,:columnWidth,:isDataPriv)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(queryInstanceColumn.getColumnName())) {      sql.setNullString("columnName");     } else {    sql.setString("columnName", queryInstanceColumn.getColumnName());    }    if (queryInstanceColumn.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", queryInstanceColumn.getCreateTime());    }       if (StringUtil.isBlank(queryInstanceColumn.getIsGroup())) {      sql.setNullString("isGroup");     } else {    sql.setString("isGroup", queryInstanceColumn.getIsGroup());    }       if (StringUtil.isBlank(queryInstanceColumn.getIsSum())) {      sql.setNullString("isSum");     } else {    sql.setString("isSum", queryInstanceColumn.getIsSum());    }       if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {      sql.setNullLong("queryInstanceColumnId");     } else {    sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());    }       if (StringUtil.isBlank(queryInstanceColumn.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", queryInstanceColumn.getSeq());    }       if (StringUtil.isBlank(queryInstanceColumn.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", queryInstanceColumn.getSts());    }      if (StringUtil.isBlank(queryInstanceColumn.getBgColor())) {          sql.setNullString("bgColor");         } else {        sql.setString("bgColor", queryInstanceColumn.getBgColor());        }            if (StringUtil.isBlank(queryInstanceColumn.getWidth())) {          sql.setNullString("columnWidth");         } else {        sql.setString("columnWidth", queryInstanceColumn.getWidth());        }      sql.setString("instanceId", queryInstanceColumn.getInstanceId());            if (StringUtil.isBlank(queryInstanceColumn.getIsDataPriv())) {          sql.setNullString("isDataPriv");         } else {        sql.setString("isDataPriv", queryInstanceColumn.getIsDataPriv());        }                  sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;    if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT COLUMN_NAME,CREATE_TIME,IS_GROUP,IS_SUM,QUERY_INSTANCE_COLUMN_ID,SEQ,STS FROM QUERY_INSTANCE_COLUMN WHERE 1=1  ");sql.append(" and QUERY_INSTANCE_COLUMN_ID=:queryInstanceColumnId");sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      queryInstanceColumn =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           queryInstanceColumn = new QueryInstanceColumnSVO();           queryInstanceColumn.setColumnName(rs.getString("COLUMN_NAME"));           queryInstanceColumn.setCreateTime(rs.getTimestamp("CREATE_TIME"));           queryInstanceColumn.setIsGroup(rs.getString("IS_GROUP"));           queryInstanceColumn.setIsSum(rs.getString("IS_SUM"));           queryInstanceColumn.setQueryInstanceColumnId(rs.getString("QUERY_INSTANCE_COLUMN_ID"));           queryInstanceColumn.setSeq(rs.getString("SEQ"));           queryInstanceColumn.setSts(rs.getString("STS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return queryInstanceColumn;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT COLUMN_NAME,CREATE_TIME,IS_GROUP,IS_SUM,QUERY_INSTANCE_COLUMN_ID,SEQ,STS FROM QUERY_INSTANCE_COLUMN WHERE 1=1 ");     try {if (queryInstanceColumn.getFlagColumnName() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getColumnName())) {             sql.append(" and COLUMN_NAME is null ");          }      else{             sql.append(" and COLUMN_NAME=:columnName");             sql.setString("columnName", queryInstanceColumn.getColumnName());          }   } if (queryInstanceColumn.getFlagCreateTime() == 1) {      if (queryInstanceColumn.getCreateTime() == null) {             sql.append(" and CREATE_TIME is null ");          }      else{             sql.append(" and CREATE_TIME=:createTime");             sql.setTimestamp("createTime", queryInstanceColumn.getCreateTime());          }   } if (queryInstanceColumn.getFlagIsGroup() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getIsGroup())) {             sql.append(" and IS_GROUP is null ");          }      else{             sql.append(" and IS_GROUP=:isGroup");             sql.setString("isGroup", queryInstanceColumn.getIsGroup());          }   } if (queryInstanceColumn.getFlagIsSum() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getIsSum())) {             sql.append(" and IS_SUM is null ");          }      else{             sql.append(" and IS_SUM=:isSum");             sql.setString("isSum", queryInstanceColumn.getIsSum());          }   } if (queryInstanceColumn.getFlagQueryInstanceColumnId() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {             sql.append(" and QUERY_INSTANCE_COLUMN_ID is null ");          }      else{             sql.append(" and QUERY_INSTANCE_COLUMN_ID=:queryInstanceColumnId");             sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());          }   } if (queryInstanceColumn.getFlagSeq() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getSeq())) {             sql.append(" and SEQ is null ");          }      else{             sql.append(" and SEQ=:seq");             sql.setLong("seq", queryInstanceColumn.getSeq());          }   } if (queryInstanceColumn.getFlagSts() == 1) {      if (StringUtil.isBlank(queryInstanceColumn.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", queryInstanceColumn.getSts());          }   }if (StringUtil.isBlank(queryInstanceColumn.getInstanceId())) {    sql.append(" and instance_id is null "); }else{    sql.append(" and instance_id=:instanceId");    sql.setString("instanceId", queryInstanceColumn.getInstanceId()); }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           queryInstanceColumn = new QueryInstanceColumnSVO();           queryInstanceColumn.setColumnName(rs.getString("COLUMN_NAME"));           queryInstanceColumn.setCreateTime(rs.getTimestamp("CREATE_TIME"));           queryInstanceColumn.setIsGroup(rs.getString("IS_GROUP"));           queryInstanceColumn.setIsSum(rs.getString("IS_SUM"));           queryInstanceColumn.setQueryInstanceColumnId(rs.getString("QUERY_INSTANCE_COLUMN_ID"));           queryInstanceColumn.setSeq(rs.getString("SEQ"));           queryInstanceColumn.setSts(rs.getString("STS"));               res.add(queryInstanceColumn);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;    if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE QUERY_INSTANCE_COLUMN SET ");     try {if (queryInstanceColumn.getFlagColumnName() == 1) {sql.append("COLUMN_NAME=:columnName,"); sql.setString("columnName", queryInstanceColumn.getColumnName()); } if (queryInstanceColumn.getFlagCreateTime() == 1) {sql.append("CREATE_TIME=:createTime,"); sql.setTimestamp("createTime", queryInstanceColumn.getCreateTime()); } if (queryInstanceColumn.getFlagIsGroup() == 1) {sql.append("IS_GROUP=:isGroup,"); sql.setString("isGroup", queryInstanceColumn.getIsGroup()); } if (queryInstanceColumn.getFlagIsSum() == 1) {sql.append("IS_SUM=:isSum,"); sql.setString("isSum", queryInstanceColumn.getIsSum()); } if (queryInstanceColumn.getFlagSeq() == 1) {sql.append("SEQ=:seq,");sql.setLong("seq", queryInstanceColumn.getSeq()); } if (queryInstanceColumn.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", queryInstanceColumn.getSts()); }if (StringUtil.isBlank(queryInstanceColumn.getIsDataPriv())) {    sql.setNullString("isDataPriv");   } else {  sql.setString("isDataPriv", queryInstanceColumn.getIsDataPriv());  }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and QUERY_INSTANCE_COLUMN_ID=:queryInstanceColumnId");sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO QUERY_INSTANCE_COLUMN(COLUMN_NAME,CREATE_TIME,IS_GROUP,IS_SUM,QUERY_INSTANCE_COLUMN_ID,SEQ,STS)");sql.append(" VALUES (:columnName,:createTime,:isGroup,:isSum,:queryInstanceColumnId,:seq,:sts)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) list.get(i);         if (queryInstanceColumn== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(queryInstanceColumn.getColumnName())) {      sql.setNullString("columnName");     } else {    sql.setString("columnName", queryInstanceColumn.getColumnName());    }    if (queryInstanceColumn.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", queryInstanceColumn.getCreateTime());    }       if (StringUtil.isBlank(queryInstanceColumn.getIsGroup())) {      sql.setNullString("isGroup");     } else {    sql.setString("isGroup", queryInstanceColumn.getIsGroup());    }       if (StringUtil.isBlank(queryInstanceColumn.getIsSum())) {      sql.setNullString("isSum");     } else {    sql.setString("isSum", queryInstanceColumn.getIsSum());    }       if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {      sql.setNullLong("queryInstanceColumnId");     } else {    sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());    }       if (StringUtil.isBlank(queryInstanceColumn.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", queryInstanceColumn.getSeq());    }       if (StringUtil.isBlank(queryInstanceColumn.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", queryInstanceColumn.getSts());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;    if (StringUtil.isBlank(queryInstanceColumn.getQueryInstanceColumnId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM QUERY_INSTANCE_COLUMN WHERE 1=1  ");sql.append(" and QUERY_INSTANCE_COLUMN_ID=:queryInstanceColumnId");sql.setLong("queryInstanceColumnId", queryInstanceColumn.getQueryInstanceColumnId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     QueryInstanceColumnSVO queryInstanceColumn=(QueryInstanceColumnSVO) vo;       }}
