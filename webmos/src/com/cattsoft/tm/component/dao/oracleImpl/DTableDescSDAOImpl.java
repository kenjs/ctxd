package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IDTableDescSDAO;import com.cattsoft.tm.vo.DTableDescSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法DTableDescSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class DTableDescSDAOImpl implements IDTableDescSDAO{    private static Logger log = Logger.getLogger(DTableDescSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     DTableDescSVO dTableDesc=(DTableDescSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO D_TABLE_DESC(CREATE_TIME,SEQ,TABLE_DESC,TABLE_ID,TABLE_NAME)");sql.append(" VALUES (:createTime,:seq,:tableDesc,:tableId,:tableName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (dTableDesc.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", dTableDesc.getCreateTime());    }       if (StringUtil.isBlank(dTableDesc.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", dTableDesc.getSeq());    }       if (StringUtil.isBlank(dTableDesc.getTableDesc())) {      sql.setNullString("tableDesc");     } else {    sql.setString("tableDesc", dTableDesc.getTableDesc());    }       if (StringUtil.isBlank(dTableDesc.getTableId())) {      sql.setNullLong("tableId");     } else {    sql.setLong("tableId", dTableDesc.getTableId());    }       if (StringUtil.isBlank(dTableDesc.getTableName())) {      sql.setNullString("tableName");     } else {    sql.setString("tableName", dTableDesc.getTableName());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     DTableDescSVO dTableDesc=(DTableDescSVO) vo;       Sql sql = new Sql("SELECT CREATE_TIME,SEQ,TABLE_DESC,TABLE_ID,TABLE_NAME FROM D_TABLE_DESC WHERE 1=1  ");       if (dTableDesc.getFlagTableId() == 1) {    	      if (StringUtil.isBlank(dTableDesc.getTableId())) {    	             sql.append(" and 1=0 ");    	          }    	      else{    	             sql.append(" and TABLE_ID=:tableId");    	             sql.setLong("tableId", dTableDesc.getTableId());    	          }    	   }      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      dTableDesc =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           dTableDesc = new DTableDescSVO();           dTableDesc.setCreateTime(rs.getTimestamp("CREATE_TIME"));           dTableDesc.setSeq(rs.getString("SEQ"));           dTableDesc.setTableDesc(rs.getString("TABLE_DESC"));           dTableDesc.setTableId(rs.getString("TABLE_ID"));           dTableDesc.setTableName(rs.getString("TABLE_NAME"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return dTableDesc;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       DTableDescSVO dTableDesc=(DTableDescSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_TIME,SEQ,TABLE_DESC,TABLE_ID,TABLE_NAME FROM D_TABLE_DESC WHERE 1=1 ");     try {if (dTableDesc.getFlagCreateTime() == 1) {      if (dTableDesc.getCreateTime() == null) {             sql.append(" and CREATE_TIME is null ");          }      else{             sql.append(" and CREATE_TIME=:createTime");             sql.setTimestamp("createTime", dTableDesc.getCreateTime());          }   } if (dTableDesc.getFlagSeq() == 1) {      if (StringUtil.isBlank(dTableDesc.getSeq())) {             sql.append(" and SEQ is null ");          }      else{             sql.append(" and SEQ=:seq");             sql.setLong("seq", dTableDesc.getSeq());          }   } if (dTableDesc.getFlagTableDesc() == 1) {      if (StringUtil.isBlank(dTableDesc.getTableDesc())) {             sql.append(" and TABLE_DESC is null ");          }      else{             sql.append(" and TABLE_DESC=:tableDesc");             sql.setString("tableDesc", dTableDesc.getTableDesc());          }   } if (dTableDesc.getFlagTableId() == 1) {      if (StringUtil.isBlank(dTableDesc.getTableId())) {             sql.append(" and TABLE_ID is null ");          }      else{             sql.append(" and TABLE_ID=:tableId");             sql.setLong("tableId", dTableDesc.getTableId());          }   } if (dTableDesc.getFlagTableName() == 1) {      if (StringUtil.isBlank(dTableDesc.getTableName())) {             sql.append(" and TABLE_NAME is null ");          }      else{             sql.append(" and TABLE_NAME=:tableName");             sql.setString("tableName", dTableDesc.getTableName());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           dTableDesc = new DTableDescSVO();           dTableDesc.setCreateTime(rs.getTimestamp("CREATE_TIME"));           dTableDesc.setSeq(rs.getString("SEQ"));           dTableDesc.setTableDesc(rs.getString("TABLE_DESC"));           dTableDesc.setTableId(rs.getString("TABLE_ID"));           dTableDesc.setTableName(rs.getString("TABLE_NAME"));               res.add(dTableDesc);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       DTableDescSVO dTableDesc=(DTableDescSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE D_TABLE_DESC SET ");     try {if (dTableDesc.getFlagCreateTime() == 1) {sql.append("CREATE_TIME=:createTime,"); sql.setTimestamp("createTime", dTableDesc.getCreateTime()); } if (dTableDesc.getFlagSeq() == 1) {sql.append("SEQ=:seq,");sql.setLong("seq", dTableDesc.getSeq()); } if (dTableDesc.getFlagTableDesc() == 1) {sql.append("TABLE_DESC=:tableDesc,"); sql.setString("tableDesc", dTableDesc.getTableDesc()); } if (dTableDesc.getFlagTableId() == 1) {sql.append("TABLE_ID=:tableId,");sql.setLong("tableId", dTableDesc.getTableId()); } if (dTableDesc.getFlagTableName() == 1) {sql.append("TABLE_NAME=:tableName,"); sql.setString("tableName", dTableDesc.getTableName()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO D_TABLE_DESC(CREATE_TIME,SEQ,TABLE_DESC,TABLE_ID,TABLE_NAME)");sql.append(" VALUES (:createTime,:seq,:tableDesc,:tableId,:tableName)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       DTableDescSVO dTableDesc=(DTableDescSVO) list.get(i);         if (dTableDesc== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (dTableDesc.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", dTableDesc.getCreateTime());    }       if (StringUtil.isBlank(dTableDesc.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", dTableDesc.getSeq());    }       if (StringUtil.isBlank(dTableDesc.getTableDesc())) {      sql.setNullString("tableDesc");     } else {    sql.setString("tableDesc", dTableDesc.getTableDesc());    }       if (StringUtil.isBlank(dTableDesc.getTableId())) {      sql.setNullLong("tableId");     } else {    sql.setLong("tableId", dTableDesc.getTableId());    }       if (StringUtil.isBlank(dTableDesc.getTableName())) {      sql.setNullString("tableName");     } else {    sql.setString("tableName", dTableDesc.getTableName());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     DTableDescSVO dTableDesc=(DTableDescSVO) vo;     String tableName=dTableDesc.getTableName();     if(StringUtil.isBlank(tableName)) {    	 throw new AppException("100001", "缺少DAO操作对象！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM D_TABLE_DESC WHERE 1=1  and TABLE_NAME=:tableName");              sql.setString("tableName", tableName);             try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     DTableDescSVO dTableDesc=(DTableDescSVO) vo;       }}
