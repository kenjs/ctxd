package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IFuncMenuSDAO;import com.cattsoft.tm.vo.FuncMenuSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法FuncMenuSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class FuncMenuSDAOImpl implements IFuncMenuSDAO{    private static Logger log = Logger.getLogger(FuncMenuSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncMenuSVO funcMenu=(FuncMenuSVO) vo;    if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_MENU(DEPTH,DESCRIPTION,FUNC_MENU_ID,FUNC_MENU_NAME,HTML,INSTANCE_ID,PARENT_ID,SEQ,STS,STS_DATE,VERSION)");sql.append(" VALUES (:depth,:description,:funcMenuId,:funcMenuName,:html,:instanceId,:parentId,:seq,:sts,:stsDate,:version)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(funcMenu.getDepth())) {      sql.setNullString("depth");     } else {    sql.setString("depth", funcMenu.getDepth());    }       if (StringUtil.isBlank(funcMenu.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcMenu.getDescription());    }       if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {      sql.setNullLong("funcMenuId");     } else {    sql.setLong("funcMenuId", funcMenu.getFuncMenuId());    }       if (StringUtil.isBlank(funcMenu.getFuncMenuName())) {      sql.setNullString("funcMenuName");     } else {    sql.setString("funcMenuName", funcMenu.getFuncMenuName());    }       if (StringUtil.isBlank(funcMenu.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcMenu.getHtml());    }       if (StringUtil.isBlank(funcMenu.getInstanceId())) {      sql.setNullLong("instanceId");     } else {    sql.setLong("instanceId", funcMenu.getInstanceId());    }       if (StringUtil.isBlank(funcMenu.getParentId())) {      sql.setNullLong("parentId");     } else {    sql.setLong("parentId", funcMenu.getParentId());    }       if (StringUtil.isBlank(funcMenu.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", funcMenu.getSeq());    }       if (StringUtil.isBlank(funcMenu.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", funcMenu.getSts());    }    if (funcMenu.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", funcMenu.getStsDate());    }       if (StringUtil.isBlank(funcMenu.getVersion())) {      sql.setNullString("version");     } else {    sql.setString("version", funcMenu.getVersion());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncMenuSVO funcMenu=(FuncMenuSVO) vo;    if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT DEPTH,DESCRIPTION,FUNC_MENU_ID,FUNC_MENU_NAME,HTML,INSTANCE_ID,PARENT_ID,SEQ,STS,STS_DATE,VERSION FROM FUNC_MENU WHERE 1=1  ");sql.append(" and FUNC_MENU_ID=:funcMenuId");sql.setLong("funcMenuId", funcMenu.getFuncMenuId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      funcMenu =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           funcMenu = new FuncMenuSVO();           funcMenu.setDepth(rs.getString("DEPTH"));           funcMenu.setDescription(rs.getString("DESCRIPTION"));           funcMenu.setFuncMenuId(rs.getString("FUNC_MENU_ID"));           funcMenu.setFuncMenuName(rs.getString("FUNC_MENU_NAME"));           funcMenu.setHtml(rs.getString("HTML"));           funcMenu.setInstanceId(rs.getString("INSTANCE_ID"));           funcMenu.setParentId(rs.getString("PARENT_ID"));           funcMenu.setSeq(rs.getString("SEQ"));           funcMenu.setSts(rs.getString("STS"));           funcMenu.setStsDate(rs.getTimestamp("STS_DATE"));           funcMenu.setVersion(rs.getString("VERSION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return funcMenu;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncMenuSVO funcMenu=(FuncMenuSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT DEPTH,DESCRIPTION,FUNC_MENU_ID,FUNC_MENU_NAME,HTML,INSTANCE_ID,PARENT_ID,SEQ,STS,STS_DATE,VERSION FROM FUNC_MENU WHERE 1=1 ");     try {if (funcMenu.getFlagDepth() == 1) {      if (StringUtil.isBlank(funcMenu.getDepth())) {             sql.append(" and DEPTH is null ");          }      else{             sql.append(" and DEPTH=:depth");             sql.setString("depth", funcMenu.getDepth());          }   } if (funcMenu.getFlagDescription() == 1) {      if (StringUtil.isBlank(funcMenu.getDescription())) {             sql.append(" and DESCRIPTION is null ");          }      else{             sql.append(" and DESCRIPTION=:description");             sql.setString("description", funcMenu.getDescription());          }   } if (funcMenu.getFlagFuncMenuId() == 1) {      if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {             sql.append(" and FUNC_MENU_ID is null ");          }      else{             sql.append(" and FUNC_MENU_ID=:funcMenuId");             sql.setLong("funcMenuId", funcMenu.getFuncMenuId());          }   } if (funcMenu.getFlagFuncMenuName() == 1) {      if (StringUtil.isBlank(funcMenu.getFuncMenuName())) {             sql.append(" and FUNC_MENU_NAME is null ");          }      else{             sql.append(" and FUNC_MENU_NAME=:funcMenuName");             sql.setString("funcMenuName", funcMenu.getFuncMenuName());          }   } if (funcMenu.getFlagHtml() == 1) {      if (StringUtil.isBlank(funcMenu.getHtml())) {             sql.append(" and HTML is null ");          }      else{             sql.append(" and HTML=:html");             sql.setString("html", funcMenu.getHtml());          }   } if (funcMenu.getFlagInstanceId() == 1) {      if (StringUtil.isBlank(funcMenu.getInstanceId())) {             sql.append(" and INSTANCE_ID is null ");          }      else{             sql.append(" and INSTANCE_ID=:instanceId");             sql.setLong("instanceId", funcMenu.getInstanceId());          }   } if (funcMenu.getFlagParentId() == 1) {      if (StringUtil.isBlank(funcMenu.getParentId())) {             sql.append(" and PARENT_ID is null ");          }      else{             sql.append(" and PARENT_ID=:parentId");             sql.setLong("parentId", funcMenu.getParentId());          }   } if (funcMenu.getFlagSeq() == 1) {      if (StringUtil.isBlank(funcMenu.getSeq())) {             sql.append(" and SEQ is null ");          }      else{             sql.append(" and SEQ=:seq");             sql.setLong("seq", funcMenu.getSeq());          }   } if (funcMenu.getFlagSts() == 1) {      if (StringUtil.isBlank(funcMenu.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", funcMenu.getSts());          }   } if (funcMenu.getFlagStsDate() == 1) {      if (funcMenu.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", funcMenu.getStsDate());          }   } if (funcMenu.getFlagVersion() == 1) {      if (StringUtil.isBlank(funcMenu.getVersion())) {             sql.append(" and VERSION is null ");          }      else{             sql.append(" and VERSION=:version");             sql.setString("version", funcMenu.getVersion());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           funcMenu = new FuncMenuSVO();           funcMenu.setDepth(rs.getString("DEPTH"));           funcMenu.setDescription(rs.getString("DESCRIPTION"));           funcMenu.setFuncMenuId(rs.getString("FUNC_MENU_ID"));           funcMenu.setFuncMenuName(rs.getString("FUNC_MENU_NAME"));           funcMenu.setHtml(rs.getString("HTML"));           funcMenu.setInstanceId(rs.getString("INSTANCE_ID"));           funcMenu.setParentId(rs.getString("PARENT_ID"));           funcMenu.setSeq(rs.getString("SEQ"));           funcMenu.setSts(rs.getString("STS"));           funcMenu.setStsDate(rs.getTimestamp("STS_DATE"));           funcMenu.setVersion(rs.getString("VERSION"));               res.add(funcMenu);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncMenuSVO funcMenu=(FuncMenuSVO) vo;    if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE FUNC_MENU SET ");     try {if (funcMenu.getFlagDepth() == 1) {sql.append("DEPTH=:depth,"); sql.setString("depth", funcMenu.getDepth()); } if (funcMenu.getFlagDescription() == 1) {sql.append("DESCRIPTION=:description,"); sql.setString("description", funcMenu.getDescription()); } if (funcMenu.getFlagFuncMenuName() == 1) {sql.append("FUNC_MENU_NAME=:funcMenuName,"); sql.setString("funcMenuName", funcMenu.getFuncMenuName()); } if (funcMenu.getFlagHtml() == 1) {sql.append("HTML=:html,"); sql.setString("html", funcMenu.getHtml()); } if (funcMenu.getFlagInstanceId() == 1) {sql.append("INSTANCE_ID=:instanceId,");sql.setLong("instanceId", funcMenu.getInstanceId()); } if (funcMenu.getFlagParentId() == 1) {sql.append("PARENT_ID=:parentId,");sql.setLong("parentId", funcMenu.getParentId()); } if (funcMenu.getFlagSeq() == 1) {sql.append("SEQ=:seq,");sql.setLong("seq", funcMenu.getSeq()); } if (funcMenu.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", funcMenu.getSts()); } if (funcMenu.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", funcMenu.getStsDate()); } if (funcMenu.getFlagVersion() == 1) {sql.append("VERSION=:version,"); sql.setString("version", funcMenu.getVersion()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and FUNC_MENU_ID=:funcMenuId");sql.setLong("funcMenuId", funcMenu.getFuncMenuId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_MENU(DEPTH,DESCRIPTION,FUNC_MENU_ID,FUNC_MENU_NAME,HTML,INSTANCE_ID,PARENT_ID,SEQ,STS,STS_DATE,VERSION)");sql.append(" VALUES (:depth,:description,:funcMenuId,:funcMenuName,:html,:instanceId,:parentId,:seq,:sts,:stsDate,:version)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       FuncMenuSVO funcMenu=(FuncMenuSVO) list.get(i);         if (funcMenu== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(funcMenu.getDepth())) {      sql.setNullString("depth");     } else {    sql.setString("depth", funcMenu.getDepth());    }       if (StringUtil.isBlank(funcMenu.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcMenu.getDescription());    }       if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {      sql.setNullLong("funcMenuId");     } else {    sql.setLong("funcMenuId", funcMenu.getFuncMenuId());    }       if (StringUtil.isBlank(funcMenu.getFuncMenuName())) {      sql.setNullString("funcMenuName");     } else {    sql.setString("funcMenuName", funcMenu.getFuncMenuName());    }       if (StringUtil.isBlank(funcMenu.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcMenu.getHtml());    }       if (StringUtil.isBlank(funcMenu.getInstanceId())) {      sql.setNullLong("instanceId");     } else {    sql.setLong("instanceId", funcMenu.getInstanceId());    }       if (StringUtil.isBlank(funcMenu.getParentId())) {      sql.setNullLong("parentId");     } else {    sql.setLong("parentId", funcMenu.getParentId());    }       if (StringUtil.isBlank(funcMenu.getSeq())) {      sql.setNullLong("seq");     } else {    sql.setLong("seq", funcMenu.getSeq());    }       if (StringUtil.isBlank(funcMenu.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", funcMenu.getSts());    }    if (funcMenu.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", funcMenu.getStsDate());    }       if (StringUtil.isBlank(funcMenu.getVersion())) {      sql.setNullString("version");     } else {    sql.setString("version", funcMenu.getVersion());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncMenuSVO funcMenu=(FuncMenuSVO) vo;    if (StringUtil.isBlank(funcMenu.getFuncMenuId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM FUNC_MENU WHERE 1=1  ");sql.append(" and FUNC_MENU_ID=:funcMenuId");sql.setLong("funcMenuId", funcMenu.getFuncMenuId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         }  public void deleteByInstanceId(String instanceId)throws AppException, SysException {     if (StringUtil.isBlank(instanceId)) {     throw new AppException("100001", "缺少DAO操作对象！");    }      Connection conn = null;      PreparedStatement ps = null;   Sql sql = new Sql("DELETE FROM FUNC_MENU WHERE 1=1  ");sql.append(" and INSTANCE_ID=:instanceId");sql.setLong("instanceId", instanceId);  try {       conn = ConnectionFactory.getConnection();       ps = conn.prepareStatement(sql.getSql());       sql.fillParams(ps);       sql.log(this.getClass());       ps.executeUpdate();       } catch (SQLException se) {       throw new SysException("100003", "JDBC操作异常！", se);              } finally {                JdbcUtil.close(ps);       }     } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     FuncMenuSVO funcMenu=(FuncMenuSVO) vo;       }}
